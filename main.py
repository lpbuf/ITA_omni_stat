from datetime import datetime, date, time, timedelta
import argparse
import pytz
from apscheduler.schedulers.blocking import BlockingScheduler

from config import TIMEZONE
from services.omnidesk_api import fetch_stats
from services.telegram_bot import send_message
from utils.logger import get_logger

logger = get_logger(__name__)


def format_message(
    data: list[dict],
    from_time: datetime,
    to_time: datetime
) -> str:
    """–°—Ç—Ä–æ–∏—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Markdown-—Ñ–æ—Ä–º–∞—Ç–æ–º —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Å–ø–∏—Å–∫–æ–º –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏."""
    header = f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {from_time.strftime('%d.%m %H:%M')} ‚Äì {to_time.strftime('%d.%m %H:%M')}:*"

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –∑–∞–ø–∏—Å–∏: >5 –Ω–æ–≤—ã—Ö –∏ –Ω–µ ¬´–±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ¬ª
    entries = []
    for record in data:
        # –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å int –∏–∑ new_cases_in_total
        try:
            new_cases = int(record.get("new_cases_in_total", 0))
        except (ValueError, TypeError):
            continue

        name = record.get("staff_name", "").strip()
        if new_cases <= 5 or name.lower() == "–±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ":
            continue

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        raw = record.get("first_response_time")
        try:
            secs = int(raw)
            m, s = divmod(secs, 60)
            frt = f"{m} –º {s} —Å"
        except (ValueError, TypeError):
            frt = "-"

        entries.append({
            "name": name,
            "new": new_cases,
            "frt": frt,
        })

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ ‚Äî —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ¬´–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö¬ª
    if not entries:
        return "\n".join([header, "", "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ —á–µ–º 5 –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ ‚ùå"])

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–≤—ã–º –æ–±—Ä–∞—â–µ–Ω–∏—è–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    entries.sort(key=lambda x: x["new"], reverse=True)

    # —Å—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫–∏
    lines = [header, ""]
    for idx, e in enumerate(entries, start=1):
        lines += [
            f"{idx}. *{e['name']}*",
            f"    üìß {e['new']} –Ω–æ–≤—ã—Ö",
            f"    ‚è± –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç: {e['frt']}",
            ""  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
        ]
    # —É–¥–∞–ª—è–µ–º –∫—Ä–∞–π–Ω–∏–π –ø—É—Å—Ç–æ–π
    if lines[-1] == "":
        lines.pop()

    return "\n".join(lines)


def format_and_send(start: datetime, end: datetime):
    logger.info(f"Run report: {start} ‚Üí {end}")
    stats = fetch_stats(start, end)
    text = format_message(stats, start, end)
    # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ text ‚Äî —Å—Ç—Ä–æ–∫–∞
    if not isinstance(text, str):
        text = str(text)
    send_message(text, parse_mode="Markdown")


def schedule_jobs():
    tz = pytz.timezone(TIMEZONE)
    sched = BlockingScheduler(timezone=tz)

    # —É—Ç—Ä–æ (10:01) ‚Äî –≤—á–µ—Ä–∞ 21:00 –¥–æ —Å–µ–≥–æ–¥–Ω—è 08:00
    sched.add_job(
        lambda: format_and_send(
            tz.localize(datetime.combine(date.today(), time(21))) - timedelta(days=1),
            tz.localize(datetime.combine(date.today(), time(8)))
        ),
        'cron', hour=10, minute=1, id='morning'
    )
    # –≤–µ—á–µ—Ä (23:01) ‚Äî —Å–µ–≥–æ–¥–Ω—è 09:00 –¥–æ —Å–µ–≥–æ–¥–Ω—è 21:00
    sched.add_job(
        lambda: format_and_send(
            tz.localize(datetime.combine(date.today(), time(9))),
            tz.localize(datetime.combine(date.today(), time(21)))
        ),
        'cron', hour=23, minute=1, id='evening'
    )

    logger.info("Scheduler started")
    sched.start()


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument("--manual", action="store_true", help="–µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–æ–Ω")
    p.add_argument("--from", dest="from_ts", help="–Ω–∞—á–∞–ª–æ ¬´YYYY-MM-DD HH:MM¬ª")
    p.add_argument("--to",   dest="to_ts",   help="–∫–æ–Ω–µ—Ü ¬´YYYY-MM-DD HH:MM¬ª")
    return p.parse_args()


if __name__ == "__main__":
    args = parse_args()
    tz = pytz.timezone(TIMEZONE)

    if args.manual:
        start = tz.localize(datetime.strptime(args.from_ts, "%Y-%m-%d %H:%M"))
        end   = tz.localize(datetime.strptime(args.to_ts,   "%Y-%m-%d %H:%M"))
        format_and_send(start, end)
    else:
        schedule_jobs()